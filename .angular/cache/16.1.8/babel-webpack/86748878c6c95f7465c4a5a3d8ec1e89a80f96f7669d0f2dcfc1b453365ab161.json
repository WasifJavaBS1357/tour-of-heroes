{"ast":null,"code":"var _class;\nimport { of } from \"rxjs\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  searchHeroes(term) {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(`no heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n  }\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  deleteHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\n_class = HeroService;\n_class.ɵfac = function HeroService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["of","HttpHeaders","catchError","tap","HeroService","constructor","http","messageService","heroesUrl","httpOptions","headers","addHero","hero","post","pipe","newHero","log","id","handleError","getHeroes","get","_","getHero","url","searchHeroes","term","trim","x","length","updateHero","put","deleteHero","delete","operation","result","error","console","message","add","i0","ɵɵinject","i1","HttpClient","i2","MessageService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\BS1123\\StuffDoneHere\\CodingStuff\\FrontEndStuff\\Angular\\angular-tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Hero} from \"./hero\";\nimport {Observable, of} from \"rxjs\";\nimport {MessageService} from \"./message.service\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {catchError, tap} from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  constructor(private http: HttpClient,private messageService: MessageService) { }\n\n\n  addHero(hero: Hero): Observable<Hero> {\n    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n        tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n        catchError(this.handleError<Hero>('addHero'))\n    );\n  }\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl).pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n    );\n  }\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get<Hero>(url).pipe(\n        tap(_ => this.log(`fetched hero id=${id}`)),\n        catchError(this.handleError<Hero>(`getHero id=${id}`))\n    );\n  }\n\n  searchHeroes(term: string): Observable<Hero[]> {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get<Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n        tap(x => x.length ?\n            this.log(`found heroes matching \"${term}\"`) :\n            this.log(`no heroes matching \"${term}\"`)),\n        catchError(this.handleError<Hero[]>('searchHeroes', []))\n    );\n  }\n\n  updateHero(hero: Hero): Observable<any> {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n        tap(_ => this.log(`updated hero id=${hero.id}`)),\n        catchError(this.handleError<any>('updateHero'))\n    );\n  }\n  deleteHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete<Hero>(url, this.httpOptions).pipe(\n        tap(_ => this.log(`deleted hero id=${id}`)),\n        catchError(this.handleError<Hero>('deleteHero'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}