{"ast":null,"code":"var _class;\nimport { HEROES } from \"./mock-heroes\";\nimport { of } from \"rxjs\";\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\n_class = HeroService;\n_class.ɵfac = function HeroService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HEROES","of","catchError","tap","HeroService","constructor","http","messageService","heroesUrl","log","message","add","getHeroes","get","pipe","_","handleError","getHero","id","hero","find","h","operation","result","error","console","i0","ɵɵinject","i1","HttpClient","i2","MessageService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\BS1123\\StuffDoneHere\\CodingStuff\\FrontEndStuff\\Angular\\angular-tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Hero} from \"./hero\";\nimport {HEROES} from \"./mock-heroes\";\nimport {Observable, of} from \"rxjs\";\nimport {MessageService} from \"./message.service\";\nimport {HttpClient} from \"@angular/common/http\";\nimport { catchError, map, tap } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n  constructor(private http: HttpClient,private messageService: MessageService) { }\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl).pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n    );\n  }\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n}\n"],"mappings":";AAEA,SAAQA,MAAM,QAAO,eAAe;AACpC,SAAoBC,EAAE,QAAO,MAAM;AAGnC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAMrD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAASC,cAA8B;IAAvD,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,cAAc,GAAdA,cAAc;IADnD,KAAAC,SAAS,GAAG,YAAY,CAAC,CAAE;EAC4C;;EACvEC,GAAGA,CAACC,OAAe;IACzB,IAAI,CAACH,cAAc,CAACI,GAAG,CAAC,gBAAgBD,OAAO,EAAE,CAAC;EACpD;EACAE,SAASA,CAAA;IACP,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAS,IAAI,CAACL,SAAS,CAAC,CAACM,IAAI,CAC7CX,GAAG,CAACY,CAAC,IAAI,IAAI,CAACN,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACpCP,UAAU,CAAC,IAAI,CAACc,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACxD;EACH;EACAC,OAAOA,CAACC,EAAU;IAChB;IACA;IACA,MAAMC,IAAI,GAAGnB,MAAM,CAACoB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACX,cAAc,CAACI,GAAG,CAAC,gCAAgCO,EAAE,EAAE,CAAC;IAC7D,OAAOjB,EAAE,CAACkB,IAAI,CAAC;EACjB;EAGA;;;;;;;EAOQH,WAAWA,CAAIM,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACf,GAAG,CAAC,GAAGa,SAAS,YAAYE,KAAK,CAACd,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOT,EAAE,CAACsB,MAAW,CAAC;IACxB,CAAC;EACH;;SAzCWnB,WAAW;;mBAAXA,MAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;AAAA;;SAAX3B,MAAW;EAAA4B,OAAA,EAAX5B,MAAW,CAAA6B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}