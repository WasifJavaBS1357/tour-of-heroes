{"ast":null,"code":"var _class;\nimport { HEROES } from \"./mock-heroes\";\nimport { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n  }\n  getHeroes() {\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n}\n_class = HeroService;\n_class.ɵfac = function HeroService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HEROES","of","HeroService","constructor","http","messageService","getHeroes","add","getHero","id","hero","find","h","i0","ɵɵinject","i1","HttpClient","i2","MessageService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\BS1123\\StuffDoneHere\\CodingStuff\\FrontEndStuff\\Angular\\angular-tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Hero} from \"./hero\";\nimport {HEROES} from \"./mock-heroes\";\nimport {Observable, of} from \"rxjs\";\nimport {MessageService} from \"./message.service\";\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  constructor(private http: HttpClient,private messageService: MessageService) { }\n\n  getHeroes(): Observable<Hero[]> {\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n}\n"],"mappings":";AAEA,SAAQA,MAAM,QAAO,eAAe;AACpC,SAAoBC,EAAE,QAAO,MAAM;;;;AAOnC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB,EAASC,cAA8B;IAAvD,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,cAAc,GAAdA,cAAc;EAAoB;EAE/EC,SAASA,CAAA;IACP,IAAI,CAACD,cAAc,CAACE,GAAG,CAAC,6BAA6B,CAAC;IACtD,OAAON,EAAE,CAACD,MAAM,CAAC;EACnB;EACAQ,OAAOA,CAACC,EAAU;IAChB;IACA;IACA,MAAMC,IAAI,GAAGV,MAAM,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACJ,cAAc,CAACE,GAAG,CAAC,gCAAgCE,EAAE,EAAE,CAAC;IAC7D,OAAOR,EAAE,CAACS,IAAI,CAAC;EACjB;;SAdWR,WAAW;;mBAAXA,MAAW,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;AAAA;;SAAXhB,MAAW;EAAAiB,OAAA,EAAXjB,MAAW,CAAAkB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}